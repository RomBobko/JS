// üîπ –ú–æ–¥—É–ª—å 1. –ó–º—ñ–Ω–Ω—ñ, —Ç–∏–ø–∏, —Ä–æ–∑–≥–∞–ª—É–∂–µ–Ω–Ω—è, —Ü–∏–∫–ª–∏
–ó–º—ñ–Ω–Ω—ñ
let a = 10;      // –º–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è
const b = 20;    // –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞, –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–µ –º–æ–∂–Ω–∞
var c = 30;      // –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π —Å–ø–æ—Å—ñ–±, –∫—Ä–∞—â–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏

–¢–∏–ø–∏ –¥–∞–Ω–∏—Ö

number, string, boolean, null, undefined, object, symbol, bigint
(–æ—Å–Ω–æ–≤–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–Ω–∞—á–µ–Ω—å —É JS)

–†–æ–∑–≥–∞–ª—É–∂–µ–Ω–Ω—è
if (x > 10) {
  console.log("–ë—ñ–ª—å—à–µ 10");
} else if (x === 10) {
  console.log("–î–æ—Ä—ñ–≤–Ω—é—î 10");
} else {
  console.log("–ú–µ–Ω—à–µ 10");
}


üëâ –í–∏–∫–æ–Ω—É—î —Ä—ñ–∑–Ω–∏–π –∫–æ–¥ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —É–º–æ–≤–∏.

–¢–µ—Ä–Ω–∞—Ä–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
const msg = (age >= 18) ? "–î–æ—Ä–æ—Å–ª–∏–π" : "–î–∏—Ç–∏–Ω–∞";


üëâ –ö–æ—Ä–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞ if...else.

–¶–∏–∫–ª–∏
for (let i = 0; i < 5; i++) {
  console.log(i);
}


üëâ –í–∏–∫–æ–Ω—É—î –∫–æ–¥ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤.

let i = 0;
while (i < 5) {
  console.log(i);
  i++;
}


üëâ –¶–∏–∫–ª —ñ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —É–º–æ–≤–∏ –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–æ—é —ñ—Ç–µ—Ä–∞—Ü—ñ—î—é.







// üîπ –ú–æ–¥—É–ª—å 2. –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó
–ú–∞—Å–∏–≤
const arr = [1, 2, 3];
console.log(arr.length); // 3


üëâ –ú–∞—Å–∏–≤ –∑–±–µ—Ä—ñ–≥–∞—î —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω—å.

–ú–µ—Ç–æ–¥–∏ –º–∞—Å–∏–≤—ñ–≤
arr.push(4);   // –¥–æ–¥–∞—î –≤ –∫—ñ–Ω–µ—Ü—å
arr.pop();     // –≤–∏–¥–∞–ª—è—î –∑ –∫—ñ–Ω—Ü—è
arr.shift();   // –≤–∏–¥–∞–ª—è—î –∑ –ø–æ—á–∞—Ç–∫—É
arr.unshift(0); // –¥–æ–¥–∞—î –Ω–∞ –ø–æ—á–∞—Ç–æ–∫


üëâ –û—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ –º–∞—Å–∏–≤—É.

–§—É–Ω–∫—Ü—ñ—ó
function add(a, b) {
  return a + b;
}


üëâ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó.

const multiply = (a, b) => a * b;


üëâ –°—Ç—Ä—ñ–ª–∫–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è (–∫–æ—Ä–æ—Ç—à–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å).







// üîπ –ú–æ–¥—É–ª—å 3. –û–±‚Äô—î–∫—Ç–∏, rest —Ç–∞ spread
–û–±‚Äô—î–∫—Ç–∏
const user = {
  name: "Roman",
  age: 25,
};
console.log(user.name);


üëâ –û–±‚Äô—î–∫—Ç–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ "–∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–Ω—è".

–î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—è
const { name, age } = user;
console.log(name, age);


üëâ –î–æ–∑–≤–æ–ª—è—î —à–≤–∏–¥–∫–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –∑ –æ–±‚Äô—î–∫—Ç–∞.

Spread
const obj1 = { a: 1 };
const obj2 = { b: 2 };
const merged = { ...obj1, ...obj2 }; // { a:1, b:2 }


üëâ –†–æ–∑–≥–æ—Ä—Ç–∞—î –≤–º—ñ—Å—Ç –æ–±‚Äô—î–∫—Ç—ñ–≤ –∞–±–æ –º–∞—Å–∏–≤—ñ–≤.

Rest
function sum(...numbers) {
  return numbers.reduce((acc, n) => acc + n, 0);
}
console.log(sum(1,2,3,4)); // 10


üëâ –ó–±–∏—Ä–∞—î –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –≤ –º–∞—Å–∏–≤.







// üîπ –ú–æ–¥—É–ª—å 4. –ü–µ—Ä–µ–±–∏—Ä–∞—é—á—ñ –º–µ—Ç–æ–¥–∏ –º–∞—Å–∏–≤—É
const numbers = [1, 2, 3, 4, 5];

numbers.forEach(n => console.log(n));            
// –ü–µ—Ä–µ–±–∏—Ä–∞—î –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏

const doubled = numbers.map(n => n * 2);        
// –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ —ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏

const evens = numbers.filter(n => n % 2 === 0); 
// –§—ñ–ª—å—Ç—Ä—É—î –∑–∞ —É–º–æ–≤–æ—é

const found = numbers.find(n => n > 3);         
// –ü–æ–≤–µ—Ä—Ç–∞—î –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç, —â–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å

const sum = numbers.reduce((acc, n) => acc + n, 0); 
// –ê–∫—É–º—É–ª—é—î –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –æ–¥–Ω–µ

const hasEven = numbers.some(n => n % 2 === 0); 
// –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î —Ö–æ—á –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç

const allPositive = numbers.every(n => n > 0);  
// –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –ø—ñ–¥—Ö–æ–¥—è—Ç—å







// üîπ –ú–æ–¥—É–ª—å 5. this, –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏, –∫–ª–∞—Å–∏
this
const obj = {
  name: "Roman",
  showName() {
    console.log(this.name);
  }
};
obj.showName(); // Roman


üëâ this –≤–∫–∞–∑—É—î –Ω–∞ –æ–±‚Äô—î–∫—Ç, —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ —è–∫–æ–≥–æ –≤–∏–∫–ª–∏–∫–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è.

–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏
function User(name) {
  this.name = name;
}
const u1 = new User("Roman");


üëâ –§—É–Ω–∫—Ü—ñ—è-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—Ç–≤–æ—Ä—é—î –æ–±‚Äô—î–∫—Ç–∏ —á–µ—Ä–µ–∑ new.

–ü—Ä–æ—Ç–æ—Ç–∏–ø–∏
User.prototype.sayHi = function() {
  console.log(`–ü—Ä–∏–≤—ñ—Ç, —è ${this.name}`);
};
u1.sayHi();


üëâ –ú–µ—Ç–æ–¥–∏ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —á–µ—Ä–µ–∑ prototype, —ñ –≤–æ–Ω–∏ –±—É–¥—É—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ –≤—Å—ñ–º –µ–∫–∑–µ–º–ø–ª—è—Ä–∞–º.



–ö–ª–∞—Å–∏
class Hero {
  constructor(name, xp) {
    this.name = name;
    this.xp = xp;
  }
  gainXp(amount) {
    this.xp += amount;
  }
}


üëâ –ö–ª–∞—Å ‚Äî —Å—É—á–∞—Å–Ω–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –æ–±‚Äô—î–∫—Ç–∞–º–∏ —Ç–∞ –Ω–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è–º.

class Warrior extends Hero {
  constructor(name, xp, weapon) {
    super(name, xp);
    this.weapon = weapon;
  }
}


üëâ extends ‚Äî –Ω–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è –∫–ª–∞—Å—ñ–≤, super –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–∞—Ç—å–∫–∞.